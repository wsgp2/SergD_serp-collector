/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SerpAPI
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 * —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤
 */

const fs = require('fs').promises;
const path = require('path');
const axios = require('axios');
const { existsSync, mkdirSync } = require('fs');
require('dotenv').config();

// –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
const RESULTS_DIR = path.join(__dirname, '../data/results');

// API –∫–ª—é—á
const API_KEY = process.env.SERPAPI_KEY || 'fb6ea3b4855525a901510ce4462e10c39cfd2a17798c1f34e100500f3cc710eb';

// –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ SerpAPI
 * @param {string} keyword - –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @param {object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
 */
async function searchSerpApi(keyword, options = {}) {
  try {
    console.log(`üîç –ó–∞–ø—Ä–æ—Å –∫ SerpAPI: "${keyword}" (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${options.page || 1})`);
    
    // –ë–∞–∑–æ–≤–∞—è URL
    const baseUrl = 'https://serpapi.com/search.json';
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const params = {
      q: keyword,
      api_key: API_KEY,
      engine: 'google',
      hl: 'ru',
      gl: 'ru',
      location: 'Russia',
      google_domain: 'google.ru',
      num: options.num || 100,
      start: options.start || 0
    };
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const url = new URL(baseUrl);
    Object.keys(params).forEach(key => {
      url.searchParams.append(key, params[key]);
    });
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await axios.get(url.toString());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (response.data && response.data.organic_results) {
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${response.data.organic_results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
      return response.data;
    }
    
    console.warn('‚ö†Ô∏è –ù–µ—Ç –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ API');
    return null;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ SerpAPI:`, error.message);
    return null;
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
 * @param {Object} response - –û—Ç–≤–µ—Ç API
 * @param {string} keyword - –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
 * @returns {Array} - –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
 */
function extractOrganicResults(response, keyword) {
  if (!response || !response.organic_results || !Array.isArray(response.organic_results)) {
    console.warn(`‚ö†Ô∏è –ù–µ—Ç –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è "${keyword}"`);
    return [];
  }
  
  return response.organic_results.map(item => {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ URL
    let domain = 'unknown';
    try {
      domain = new URL(item.link).hostname;
    } catch (e) {
      // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å –¥–æ–º–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
    
    return {
      title: item.title || '',
      url: item.link || '',
      domain: domain,
      snippet: item.snippet || '',
      position: item.position || 0,
      source: 'google',
      query: keyword
    };
  });
}

/**
 * –§–∏–ª—å—Ç—Ä—É–µ—Ç –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã –∏ –±–∞–Ω–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
 * @param {Array} results - –ú–∞—Å—Å–∏–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
 * @returns {Array} - –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
 */
function filterAggregatorsAndBanks(results) {
  // –°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤ –∏ –±–∞–Ω–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å
  const excludeDomains = [
    // –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã
    'banki.ru', 
    'sravni.ru', 
    'bankiros.ru', 
    'vbr.ru', 
    'sreavu.ru',
    '13min.ru',
    'brobank.ru',
    'viberu.ru',
    'calculator-credit.ru',
    'kredity.ru',
    'consultant.ru',
    'rbc.ru',
    'financer.com',
    'bankstoday.net',
    'vsetarify.com',
    'mainfin.ru',
    'brobank.ru',
    'rfinansist.ru',
    
    // –ë–∞–Ω–∫–∏
    'sberbank.ru',
    'vtb.ru',
    'alfabank.ru',
    'gazprombank.ru',
    'raiffeisen.ru',
    'rshb.ru',
    'tinkoff.ru',
    'open.ru',
    'otpbank.ru',
    'psbank.ru',
    'mkb.ru',
    'sovcombank.ru',
    'unicredit.ru',
    'citibank.ru',
    'pochtabank.ru',
    'uralsib.ru',
    'rosbank.ru',
    'roscap.ru',
    'homecredit.ru',
    'bancaintesa.ru',
    'bspb.ru',
    'absolutbank.ru',
    'mtsbank.ru',
    'ing.ru',
    'zenit.ru',
    'bank-hlynov.ru',
    'credit-suisse.com',
    'tkbbank.ru',
    'tbank.ru',
    'belgazzprombank.by',
    'belgazprombank.by',
    'myfin.by',
    'mtbank.by',
    'rsb.ru',
    'dtb1.ru',
    'nskbl.ru',
    'norvikbank.ru',
    'tatsotsbank.ru',
    'abank.ru',
    'ingobank.ru',
    'svoi.ru',
    'ubrir.ru',
    'creditural.ru',
    'samolet.ru',
    'ubrr.ru',
    'tochka.com',
    'business.yandex',
    'blog.domclick.ru',
    'bki-okb.ru',
    'kontur.ru',
    'finlab.ru',
    'bank',
    '.bank',
    'vtbbiz—Åred',
    'sberbank',
    'vtb',
    'alfabank',
    'tinkoff',
    'royal finance'
  ];
  
  return results.filter(result => {
    if (!result.domain) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–º–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏ –æ–¥–∏–Ω –∏–∑ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö –¥–æ–º–µ–Ω–æ–≤
    return !excludeDomains.some(excludeDomain => 
      result.domain.includes(excludeDomain)
    );
  });
}

/**
 * –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã —Å–∞–π—Ç–æ–≤ –ø–æ –¥–æ–º–µ–Ω—É
 * @param {Array} results - –ú–∞—Å—Å–∏–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
 * @returns {Array} - –ú–∞—Å—Å–∏–≤ –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
 */
function removeDuplicateDomains(results) {
  const uniqueDomains = {};
  const uniqueResults = [];
  
  for (const result of results) {
    if (!uniqueDomains[result.domain]) {
      uniqueDomains[result.domain] = true;
      uniqueResults.push(result);
    }
  }
  
  return uniqueResults;
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞
 * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
 */
async function loadKeywords() {
  try {
    const keywordsPath = path.join(__dirname, '../data/keywords.json');
    const data = await fs.readFile(keywordsPath, 'utf8');
    const keywords = JSON.parse(data);
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${keywords.length} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤`);
    return keywords;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:', error.message);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return ['–∫—Ä–µ–¥–∏—Ç –¥–ª—è –ò–ü', '–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞', '–∑–∞–π–º –¥–ª—è –û–û–û'];
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
 */
async function run() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SerpAPI...');
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!existsSync(RESULTS_DIR)) {
    mkdirSync(RESULTS_DIR, { recursive: true });
  }
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Ç—Ä–∞—Ñ–∏–∫–æ–º, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const trafficDir = path.join(RESULTS_DIR, 'traffic');
  if (!existsSync(trafficDir)) {
    mkdirSync(trafficDir, { recursive: true });
  }
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
  const keywords = await loadKeywords();
  
  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ - —Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
  // –£—á–∏—Ç—ã–≤–∞—è –ª–∏–º–∏—Ç –≤ 100 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  const keywordsLimit = Math.min(keywords.length, 15);
  
  console.log(`‚ÑπÔ∏è –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${keywordsLimit} –∏–∑ ${keywords.length} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤`);
  
  let allResults = [];
  let requestCount = 0;
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
  for (let i = 0; i < keywordsLimit; i++) {
    const keyword = keywords[i];
    console.log(`\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ ${i+1}/${keywordsLimit}: "${keyword}"`);
    
    try {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      requestCount++;
      const response = await searchSerpApi(keyword, { num: 100 });
      
      if (response) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const results = extractOrganicResults(response, keyword);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const filteredResults = filterAggregatorsAndBanks(results);
        await fs.writeFile(
          path.join(RESULTS_DIR, `serpapi_${keyword.replace(/\s+/g, '_')}.json`),
          JSON.stringify(filteredResults, null, 2)
        );
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${filteredResults.length}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–±—â–∏–π –º–∞—Å—Å–∏–≤
        allResults = [...allResults, ...filteredResults];
      }
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç API)
      if (i < keywordsLimit - 1) {
        const waitTime = 1000 + Math.random() * 2000;
        console.log(`‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ ${Math.round(waitTime/1000)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º...`);
        await delay(waitTime);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ "${keyword}":`, error.message);
    }
  }
  
  // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã –∏ –±–∞–Ω–∫–∏
  console.log('\nüîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
  const filteredResults = filterAggregatorsAndBanks(allResults);
  const uniqueResults = removeDuplicateDomains(filteredResults);
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${filteredResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏`);
  console.log(`‚úÖ –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${uniqueResults.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const finalResultsPath = path.join(RESULTS_DIR, 'final_results.json');
  await fs.writeFile(finalResultsPath, JSON.stringify(uniqueResults, null, 2));
  console.log(`üíæ –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${finalResultsPath}`);
  
  // –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞
  await createCsvForIntercept(uniqueResults);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const stats = {
    totalKeywords: keywords.length,
    processedKeywords: keywordsLimit,
    totalRequests: requestCount,
    totalResults: allResults.length,
    uniqueResults: uniqueResults.length,
    collectionDate: new Date().toISOString()
  };
  
  await fs.writeFile(
    path.join(RESULTS_DIR, 'stats.json'),
    JSON.stringify(stats, null, 2)
  );
  
  console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:`);
  console.log(`- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: ${keywordsLimit}/${keywords.length}`);
  console.log(`- –í—ã–ø–æ–ª–Ω–µ–Ω–æ API-–∑–∞–ø—Ä–æ—Å–æ–≤: ${requestCount}`);
  console.log(`- –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${allResults.length}`);
  console.log(`- –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤: ${uniqueResults.length}`);
  
  return stats;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç CSV —Ñ–∞–π–ª —Å –¥–æ–º–µ–Ω–∞–º–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞
 * @param {Array} sites - –ú–∞—Å—Å–∏–≤ —Å–∞–π—Ç–æ–≤
 * @returns {Promise<void>}
 */
async function createCsvForIntercept(sites) {
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ CSV
    let csvContent = 'domain,title,url,snippet\n';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–∂–¥–æ–º —Å–∞–π—Ç–µ
    sites.forEach(site => {
      // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∏ —Å–Ω–∏–ø–ø–µ—Ç–µ
      const safeTitle = site.title ? site.title.replace(/"/g, '""') : '';
      const safeSnippet = site.snippet ? site.snippet.replace(/"/g, '""') : '';
      
      csvContent += `${site.domain},"${safeTitle}","${site.url}","${safeSnippet}"\n`;
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV —Ñ–∞–π–ª
    const csvPath = path.join(RESULTS_DIR, 'domains_for_intercept.csv');
    await fs.writeFile(csvPath, csvContent, 'utf8');
    console.log(`‚úÖ CSV —Ñ–∞–π–ª –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω: ${csvPath}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ
if (require.main === module) {
  run().catch(console.error);
}

module.exports = { run };
